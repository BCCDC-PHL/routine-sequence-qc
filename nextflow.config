params {
  instrument_type = "miseq"
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( params.illumina_suffixes, params.fastq_exts, params.instrument_type )
  kraken2_db = "/data/ref_databases/kraken2/2021-05-17_standard"
  bracken_db = "/data/ref_databases/kraken2/2021-05-17_standard"
  seqtk_fqchk_threshold = 30
  mash_sketch_kmer_size = 21
  mash_sketch_minimum_copies = 5
}

profiles {
  conda {
    process.conda = "$baseDir/environments/environment.yml"
    if (params.cache){
     conda.cacheDir = params.cache
    }
  }
}

def getFastqSubdir(instrument_type) { 
  if (instrument_type == "miseq") {
    fastq_subdir = "/Data/Intensities/BaseCalls"
  } else if (instrument_type == "nextseq") {
    def analysis_dirs = []
    def run_analysis_dir = new File(params.run_dir.toString() + "/Analysis")
    run_analysis_dir.traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) { analysis_dirs.add(it) }
    def latest_analysis_dir = analysis_dirs.last()
    def latest_analysis_dir_number = latest_analysis_dir.getName()
    fastq_subdir = "/Analysis/" + latest_analysis_dir_number + "/Data/fastq"
  } else {
    System.out.println("Unsupported instrument type: ${instrument_type}")
    System.exit(1)
  }
  return fastq_subdir
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts, instrument_type ) {
    def fastq_search_path = []
    def fastq_subdir = getFastqSubdir(instrument_type)
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts){
            fastq_search_path.add(params.run_dir.toString() + fastq_subdir + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  withName: kraken2 { 
    cpus = 8
    memory = '64 GB' 
  }
}


manifest {
  author = 'Dan Fornika, Nima Farzaneh'
  description = 'Routine Sequence QC'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.3.1'
}

